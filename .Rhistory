  annual_rate   = 0.06,
  debt_years    = 10,
  freq          = 1,
  gp_share      = 0.20,
  lp_share      = 0.80,
  lp_payout_ratio = 0.70
)
out
df
out <- build_split_gp_lp(
  df            = df,
  idx           = c(29, 34),
  years         = 15,
  growth        = 0.03,
  loan_amount   = 3000000,
  annual_rate   = 0.06,
  debt_years    = 10,
  freq          = 1,
  gp_share      = 0.20,
  lp_share      = 0.80,
  lp_payout_ratio = 0.70
)
out
out <- build_split_gp_lp(
  df            = df,
  idx           = c(29, 37),
  years         = 15,
  growth        = 0.03,
  loan_amount   = 3000000,
  annual_rate   = 0.06,
  debt_years    = 10,
  freq          = 1,
  gp_share      = 0.20,
  lp_share      = 0.80,
  lp_payout_ratio = 0.70
)
out
out <- build_split_gp_lp(
  df            = df,
  idx           = c(8, 17,13),
  years         = 15,
  growth        = 0.03,
  loan_amount   = 3000000,
  annual_rate   = 0.06,
  debt_years    = 10,
  freq          = 1,
  gp_share      = 0.20,
  lp_share      = 0.80,
  lp_payout_ratio = 0.70
)
out
out <- build_split_gp_lp(
  df            = df,
  idx           = c(8, 17),
  years         = 15,
  growth        = 0.03,
  loan_amount   = 3000000,
  annual_rate   = 0.06,
  debt_years    = 10,
  freq          = 1,
  gp_share      = 0.20,
  lp_share      = 0.80,
  lp_payout_ratio = 0.70
)
out
out <- build_split_gp_lp(
  df            = df,
  idx           = c(8, 17),
  years         = 15,
  growth        = 0.03,
  loan_amount   = 2000000,
  annual_rate   = 0.06,
  debt_years    = 10,
  freq          = 1,
  gp_share      = 0.20,
  lp_share      = 0.80,
  lp_payout_ratio = 0.70
)
out
out <- build_split_gp_lp(
  df            = df,
  idx           = c(8, 17,13),
  years         = 15,
  growth        = 0.03,
  loan_amount   = 2000000,
  annual_rate   = 0.06,
  debt_years    = 10,
  freq          = 1,
  gp_share      = 0.20,
  lp_share      = 0.80,
  lp_payout_ratio = 0.70
)
out
q()
ls()
out
add_investor_dcf_rows <- function(df, ret = 0.10) {
  req_cols <- c("period", "adjusted_cashflow", "gp_equity", "lp_equity",
                "lp_dividend", "lp_retained")
  missing <- setdiff(req_cols, names(df))
  if (length(missing) > 0) {
    stop("Data frame is missing required columns: ", paste(missing, collapse = ", "))
  }
  # coerce to numeric just in case
  num_cols <- c("adjusted_cashflow", "gp_equity", "lp_equity", "lp_dividend", "lp_retained")
  df[num_cols] <- lapply(df[num_cols], function(x) as.numeric(x))
  n <- nrow(df)
  if (n < 1) stop("Data frame must have at least one row.")
  # Period index for discounting (works whether period starts at 0 or 1)
  t <- df$period - min(df$period, na.rm = TRUE)
  # Rolling sum of LP retained
  lp_retained_cum <- cumsum(df$lp_retained)
  # Interest (ROI) on PRIOR period's positive retained balance
  prior_balance <- c(0, head(lp_retained_cum, -1))
  lp_retained_roi <- ret * pmax(prior_balance, 0)
  # Investor cash flow series:
  # - period 0: adjusted_cashflow[1]
  # - periods 1..n: lp_dividend + lp_retained_roi
  investor_cf <- numeric(n)
  investor_cf[1] <- df$adjusted_cashflow[1]
  if (n >= 2) {
    investor_cf[2:n] <- df$lp_dividend[2:n] + lp_retained_roi[2:n]
  }
  # Discounting
  discount_factor <- (1 + ret)^(-t)
  pv_investor_cf <- investor_cf * discount_factor
  pv_investor_cf_cum <- cumsum(pv_investor_cf)
  # Bind new columns
  df$lp_retained_cum     <- lp_retained_cum
  df$lp_retained_roi     <- lp_retained_roi
  df$investor_cf         <- investor_cf
  df$discount_factor     <- discount_factor
  df$pv_investor_cf      <- pv_investor_cf
  df$pv_investor_cf_cum  <- pv_investor_cf_cum
  df
}
add_investor_dcf_rows(df)
add_investor_dcf_rows(out)
clear
add_investor_dcf_rows <- function(df, ret = 0.10) {
  req_cols <- c("period", "adjusted_cashflow", "gp_equity", "lp_equity",
                "lp_dividend", "lp_retained")
  missing <- setdiff(req_cols, names(df))
  if (length(missing) > 0) {
    stop("Data frame is missing required columns: ", paste(missing, collapse = ", "))
  }
  # Ensure numeric types
  num_cols <- c("adjusted_cashflow", "gp_equity", "lp_equity", "lp_dividend", "lp_retained")
  df[num_cols] <- lapply(df[num_cols], as.numeric)
  n <- nrow(df)
  if (n < 1) stop("Data frame must have at least one row.")
  # Period index (handles 0-based or 1-based)
  t <- df$period - min(df$period, na.rm = TRUE)
  # --- LP retained cumulative (full, for reference)
  lp_retained_cum_full <- cumsum(df$lp_retained)
  # --- Adjusted LP retained cumulative (excludes initial investment)
  # i.e., start accumulation from period 2 onward
  lp_retained_adj <- df$lp_retained
  lp_retained_adj[1] <- 0  # exclude period 1 / initial investment
  lp_retained_cum <- cumsum(lp_retained_adj)
  # --- ROI is applied on the prior period's adjusted retained balance
  prior_balance <- c(0, head(lp_retained_cum, -1))
  lp_retained_roi <- ret * pmax(prior_balance, 0)
  # --- Investor cashflow:
  # period 1 → adjusted_cashflow[1]
  # periods 2..n → lp_dividend + lp_retained_roi
  investor_cf <- numeric(n)
  investor_cf[1] <- df$adjusted_cashflow[1]
  if (n >= 2) {
    investor_cf[2:n] <- df$lp_dividend[2:n] + lp_retained_roi[2:n]
  }
  # --- Discounted cashflow values
  discount_factor <- (1 + ret)^(-t)
  pv_investor_cf <- investor_cf * discount_factor
  pv_investor_cf_cum <- cumsum(pv_investor_cf)
  # --- Bind new columns
  df$lp_retained_cum_full <- lp_retained_cum_full   # original running sum (for reference)
  df$lp_retained_cum      <- lp_retained_cum        # adjusted cumulative excluding initial investment
  df$lp_retained_roi      <- lp_retained_roi
  df$investor_cf          <- investor_cf
  df$pv_investor_cf       <- pv_investor_cf
  df$pv_investor_cf_cum   <- pv_investor_cf_cum
  df
}
add_investor_dcf_rows(out)
add_investor_dcf_rows <- function(df, ret = 0.10) {
  req_cols <- c("period", "adjusted_cashflow", "gp_equity", "lp_equity",
                "lp_dividend", "lp_retained")
  missing <- setdiff(req_cols, names(df))
  if (length(missing) > 0) {
    stop("Data frame is missing required columns: ", paste(missing, collapse = ", "))
  }
  # Ensure numeric types
  num_cols <- c("adjusted_cashflow", "gp_equity", "lp_equity", "lp_dividend", "lp_retained")
  df[num_cols] <- lapply(df[num_cols], as.numeric)
  n <- nrow(df)
  if (n < 1) stop("Data frame must have at least one row.")
  # Period index (handles 0-based or 1-based)
  t <- df$period - min(df$period, na.rm = TRUE)
  # --- LP retained cumulative (full, for reference)
  lp_retained_cum_full <- cumsum(df$lp_retained)
  # --- Adjusted LP retained cumulative (excludes initial investment)
  # i.e., start accumulation from period 2 onward
  lp_retained_adj <- df$lp_retained
  lp_retained_adj[1] <- 0  # exclude period 1 / initial investment
  lp_retained_cum <- cumsum(lp_retained_adj)
  # --- ROI is applied on the prior period's adjusted retained balance
  prior_balance <- c(0, head(lp_retained_cum, -1))
  lp_retained_roi <- ret * pmax(prior_balance, 0)
  # --- Investor cashflow:
  # period 1 → adjusted_cashflow[1]
  # periods 2..n → lp_dividend + lp_retained_roi
  investor_cf <- numeric(n)
  investor_cf[1] <- df$adjusted_cashflow[1]
  if (n >= 2) {
    investor_cf[2:n] <- df$lp_dividend[2:n] + lp_retained_roi[2:n]
  }
  # --- Discounted cashflow values
  discount_factor <- (1 + ret)^(-t)
  pv_investor_cf <- investor_cf * discount_factor
  pv_investor_cf_cum <- cumsum(pv_investor_cf)
  # --- Bind new columns
  df$lp_retained_cum_full <- lp_retained_cum_full   # original running sum (for reference)
  df$lp_retained_cum      <- lp_retained_cum        # adjusted cumulative excluding initial investment
  df$lp_retained_roi      <- lp_retained_roi
  df$investor_cf          <- investor_cf
  df
}
add_investor_dcf_rows(out)
add_investor_dcf_rows <- function(df, ret = 0.10) {
  req_cols <- c("period", "adjusted_cashflow", "gp_equity", "lp_equity",
                "lp_dividend", "lp_retained")
  missing <- setdiff(req_cols, names(df))
  if (length(missing) > 0) {
    stop("Data frame is missing required columns: ", paste(missing, collapse = ", "))
  }
  # Ensure numeric types
  num_cols <- c("adjusted_cashflow", "gp_equity", "lp_equity", "lp_dividend", "lp_retained")
  df[num_cols] <- lapply(df[num_cols], as.numeric)
  n <- nrow(df)
  if (n < 1) stop("Data frame must have at least one row.")
  # Period index (handles 0-based or 1-based)
  t <- df$period - min(df$period, na.rm = TRUE)
  # --- LP retained cumulative (full, for reference)
  lp_retained_cum_full <- cumsum(df$lp_retained)
  # --- Adjusted LP retained cumulative (excludes initial investment)
  # i.e., start accumulation from period 2 onward
  lp_retained_adj <- df$lp_retained
  lp_retained_adj[1] <- 0  # exclude period 1 / initial investment
  lp_retained_cum <- cumsum(lp_retained_adj)
  # --- ROI is applied on the prior period's adjusted retained balance
  prior_balance <- c(0, head(lp_retained_cum, -1))
  lp_retained_roi <- ret * pmax(prior_balance, 0)
  # --- Investor cashflow:
  # period 1 → adjusted_cashflow[1]
  # periods 2..n → lp_dividend + lp_retained_roi
  investor_cf <- numeric(n)
  investor_cf[1] <- df$adjusted_cashflow[1]
  if (n >= 2) {
    investor_cf[2:n] <- df$lp_dividend[2:n] + lp_retained_roi[2:n]
  }
  investor_cf_and_ret <- investor_cf
  investor_cf_and_ret[2:n] <- investor_cf_and_ret[2:n]+lp_retained[2:n]
  # --- Bind new columns
  df$lp_retained_cum_full <- lp_retained_cum_full   # original running sum (for reference)
  df$lp_retained_cum      <- lp_retained_cum        # adjusted cumulative excluding initial investment
  df$lp_retained_roi      <- lp_retained_roi
  df$investor_cf          <- investor_cf
  df$investor_cf_and_ret <- investor_cf_and_ret
}
add_investor_dcf_rows(out)
add_investor_dcf_rows <- function(df, ret = 0.10) {
  req_cols <- c("period", "adjusted_cashflow", "gp_equity", "lp_equity",
                "lp_dividend", "lp_retained")
  missing <- setdiff(req_cols, names(df))
  if (length(missing) > 0) {
    stop("Data frame is missing required columns: ", paste(missing, collapse = ", "))
  }
  # Ensure numeric types
  num_cols <- c("adjusted_cashflow", "gp_equity", "lp_equity", "lp_dividend", "lp_retained")
  df[num_cols] <- lapply(df[num_cols], as.numeric)
  n <- nrow(df)
  if (n < 1) stop("Data frame must have at least one row.")
  # Period index (handles 0-based or 1-based)
  t <- df$period - min(df$period, na.rm = TRUE)
  # --- LP retained cumulative (full, for reference)
  lp_retained_cum_full <- cumsum(df$lp_retained)
  # --- Adjusted LP retained cumulative (excludes initial investment)
  # i.e., start accumulation from period 2 onward
  lp_retained_adj <- df$lp_retained
  lp_retained_adj[1] <- 0  # exclude period 1 / initial investment
  lp_retained_cum <- cumsum(lp_retained_adj)
  # --- ROI is applied on the prior period's adjusted retained balance
  prior_balance <- c(0, head(lp_retained_cum, -1))
  lp_retained_roi <- ret * pmax(prior_balance, 0)
  # --- Investor cashflow:
  # period 1 → adjusted_cashflow[1]
  # periods 2..n → lp_dividend + lp_retained_roi
  investor_cf <- numeric(n)
  investor_cf[1] <- df$adjusted_cashflow[1]
  if (n >= 2) {
    investor_cf[2:n] <- df$lp_dividend[2:n] + lp_retained_roi[2:n]
  }
  investor_cf_and_ret <- investor_cf
  investor_cf_and_ret[2:n] <- investor_cf_and_ret[2:n]+lp_retained_adj[2:n]
  # --- Bind new columns
  df$lp_retained_cum_full <- lp_retained_cum_full   # original running sum (for reference)
  df$lp_retained_cum      <- lp_retained_cum        # adjusted cumulative excluding initial investment
  df$lp_retained_roi      <- lp_retained_roi
  df$investor_cf          <- investor_cf
  df$investor_cf_and_ret <- investor_cf_and_ret
}
add_investor_dcf_rows(out)
add_investor_dcf_rows(out)
add_investor_dcf_rows <- function(df, ret = 0.10) {
  req_cols <- c("period", "adjusted_cashflow", "gp_equity", "lp_equity",
                "lp_dividend", "lp_retained")
  missing <- setdiff(req_cols, names(df))
  if (length(missing) > 0) {
    stop("Data frame is missing required columns: ", paste(missing, collapse = ", "))
  }
  # Ensure numeric types
  num_cols <- c("adjusted_cashflow", "gp_equity", "lp_equity", "lp_dividend", "lp_retained")
  df[num_cols] <- lapply(df[num_cols], as.numeric)
  n <- nrow(df)
  if (n < 1) stop("Data frame must have at least one row.")
  # Period index (handles 0-based or 1-based)
  t <- df$period - min(df$period, na.rm = TRUE)
  # --- LP retained cumulative (full, for reference)
  lp_retained_cum_full <- cumsum(df$lp_retained)
  # --- Adjusted LP retained cumulative (excludes initial investment)
  # i.e., start accumulation from period 2 onward
  lp_retained_adj <- df$lp_retained
  lp_retained_adj[1] <- 0  # exclude period 1 / initial investment
  lp_retained_cum <- cumsum(lp_retained_adj)
  # --- ROI is applied on the prior period's adjusted retained balance
  prior_balance <- c(0, head(lp_retained_cum, -1))
  lp_retained_roi <- ret * pmax(prior_balance, 0)
  # --- Investor cashflow:
  # period 1 → adjusted_cashflow[1]
  # periods 2..n → lp_dividend + lp_retained_roi
  investor_cf <- numeric(n)
  investor_cf[1] <- df$adjusted_cashflow[1]
  if (n >= 2) {
    investor_cf[2:n] <- df$lp_dividend[2:n] + lp_retained_roi[2:n]
  }
  investor_cf_and_ret <- investor_cf
  investor_cf_and_ret[2:n] <- investor_cf_and_ret[2:n]+lp_retained_adj[2:n]
  # --- Bind new columns
  df$lp_retained_cum_full <- lp_retained_cum_full   # original running sum (for reference)
  df$lp_retained_cum      <- lp_retained_cum        # adjusted cumulative excluding initial investment
  df$lp_retained_roi      <- lp_retained_roi
  df$investor_cf          <- investor_cf
  df$investor_cf_and_ret <- investor_cf_and_ret
}
add_investor_dcf_rows <- function(df, ret = 0.10) {
  req_cols <- c("period", "adjusted_cashflow", "gp_equity", "lp_equity",
                "lp_dividend", "lp_retained")
  missing <- setdiff(req_cols, names(df))
  if (length(missing) > 0) {
    stop("Data frame is missing required columns: ", paste(missing, collapse = ", "))
  }
  # Ensure numeric types
  num_cols <- c("adjusted_cashflow", "gp_equity", "lp_equity", "lp_dividend", "lp_retained")
  df[num_cols] <- lapply(df[num_cols], as.numeric)
  n <- nrow(df)
  if (n < 1) stop("Data frame must have at least one row.")
  # Period index (handles 0-based or 1-based)
  t <- df$period - min(df$period, na.rm = TRUE)
  # --- LP retained cumulative (full, for reference)
  lp_retained_cum_full <- cumsum(df$lp_retained)
  # --- Adjusted LP retained cumulative (excludes initial investment)
  # i.e., start accumulation from period 2 onward
  lp_retained_adj <- df$lp_retained
  lp_retained_adj[1] <- 0  # exclude period 1 / initial investment
  lp_retained_cum <- cumsum(lp_retained_adj)
  # --- ROI is applied on the prior period's adjusted retained balance
  prior_balance <- c(0, head(lp_retained_cum, -1))
  lp_retained_roi <- ret * pmax(prior_balance, 0)
  # --- Investor cashflow:
  # period 1 → adjusted_cashflow[1]
  # periods 2..n → lp_dividend + lp_retained_roi
  investor_cf <- numeric(n)
  investor_cf[1] <- df$adjusted_cashflow[1]
  if (n >= 2) {
    investor_cf[2:n] <- df$lp_dividend[2:n] + lp_retained_roi[2:n]
  }
  investor_cf_and_ret <- investor_cf
  investor_cf_and_ret[2:n] <- investor_cf_and_ret[2:n]+lp_retained_adj[2:n]
  # --- Bind new columns
  df$lp_retained_cum_full <- lp_retained_cum_full   # original running sum (for reference)
  df$lp_retained_cum      <- lp_retained_cum        # adjusted cumulative excluding initial investment
  df$lp_retained_roi      <- lp_retained_roi
  df$investor_cf          <- investor_cf
  df$investor_cf_and_ret <- investor_cf_and_ret
  df}
add_investor_dcf_rows(out)
q()
install.packages("FinCal")
library(FinCal)
library(FinCal)
colnames(out)
out_full = add_investor_dcf_rows(out)
colnames(out_full)
irr(out_full$investor_cf_and_ret)
out_full
out <- build_split_gp_lp(df,c(29, 34),15, 0.03, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out
out_full = add_investor_dcf_rows(out)
irr(out_full$investor_cf_and_ret)
out_full
q()
irr(out_full$investor_cf_and_ret)
library("FinCalc")
library(FinCal)
irr(out_full$investor_cf_and_ret)
out <- build_split_gp_lp(df,c(29, 34),15, 0.03, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
df
out <- build_split_gp_lp(df,c(29, 8),15, 0.03, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out_full = add_investor_dcf_rows(out)
irr(out_full$investor_cf_and_ret)
out <- build_split_gp_lp(df,c(29, 8),15, 0.03, 1000000, 0.06, 10, 1,0.20, 0.80, 0.70)
irr(out_full$investor_cf_and_ret)
out_full = add_investor_dcf_rows(out)
irr(out_full$investor_cf_and_ret)
out <- build_split_gp_lp(df,c(29, 8),15, 0.03, 2500000, 0.06, 10, 1,0.20, 0.80, 0.70)
out_full = add_investor_dcf_rows(out)
irr(out_full$investor_cf_and_ret)
out_full
()
q()
out <- build_split_gp_lp(df,c(29, 8),10, 0.02, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out_full = add_investor_dcf_rows(out)
library(FinCal)
irr(out_full$investor_cf_and_ret)
out <- build_split_gp_lp(df,c(29, 8),15, 0.02, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out
out_full = add_investor_dcf_rows(out)
irr(out_full$investor_cf_and_ret)
out_full
q()
df
q()
ls()
rm(list=c("combined_cf","t"))
ls()
out_full
irr(out_full$investor_cf_and_ret)
library(FinCal)
irr(out_full$investor_cf_and_ret)
df
out <- build_split_gp_lp(df,c(33,5 ),15, 0.02, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out
out_full = add_investor_dcf_rows(out)
irr(out_full$investor_cf_and_ret)
out <- build_split_gp_lp(df,c(32,4 ),15, 0.02, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out_full = add_investor_dcf_rows(out)
irr(out_full$investor_cf_and_ret)
out_full = add_investor_dcf_rows(out)
out_full
out <- build_split_gp_lp(df,c(17,4 ),15, 0.02, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out
out <- build_split_gp_lp(df,c(17,4 ),15, 0.02, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out_full
out <- build_split_gp_lp(df,c(17,29 ),15, 0.02, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out
out <- build_split_gp_lp(df,c(29,32 ),15, 0.02, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out_full
df
out <- build_split_gp_lp(df,c(29,32),15, 0.02, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out_full
out_full = add_investor_dcf_rows(out)
irr(out_full$investor_cf_and_ret)
out_full
out <- build_split_gp_lp(df,c(29,32),15, 0.02, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out
out_full = add_investor_dcf_rows(out)
out <- build_split_gp_lp(df,c(29,32),15, 0.02, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out <- build_split_gp_lp(df,c(29),15, 0.02, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out1 <- build_split_gp_lp(df,c(29),15, 0.02, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out1
out2 <- build_split_gp_lp(df,c(32),15, 0.02, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out2
out2+out1
out3 = out2
out3=out2[,:]
out3=out2[1,:]
out3=out2[1,]
out3
out3[1,] = 0
out2= rbind(out3,out1)
out2 <- build_split_gp_lp(df,c(32),15, 0.02, 2000000, 0.06, 10, 1,0.20, 0.80, 0.70)
out2 <- build_split_gp_lp(df,c(32),15, 0.02, 1000000, 0.08, 10, 1,0.20, 0.80, 0.70)
out1 <- build_split_gp_lp(df,c(29),15, 0.02, 2000000, 0.08, 10, 1,0.20, 0.80, 0.70)
out2= rbind(out3,out2)
out2= rbind(out3,out2)
out2
out1+out2
out1 = rbind(out1,out3)
out1 = rbind(out1,out3)
out1
out1+out2
out = out1+out2
out_full = add_investor_dcf_rows(out)
irr(out_full$investor_cf_and_ret)
out_full
build_split_gp_lp
split_gp_lp_cashflows
add_investor_dcf_rows
out_full
out_full$investor_cf_and_ret/9000000
q()
